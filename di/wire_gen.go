// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/nao1215/sqly/config"
	"github.com/nao1215/sqly/infrastructure/memory"
	"github.com/nao1215/sqly/infrastructure/persistence"
	"github.com/nao1215/sqly/shell"
	"github.com/nao1215/sqly/usecase"
)

// Injectors from wire.go:

// NewShell initailize main class of sqly application.
// The return function is the function to close the DB.
func NewShell() (*shell.Shell, func(), error) {
	arg, err := config.NewArg()
	if err != nil {
		return nil, nil, err
	}
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	commandList := shell.NewCommands()
	csvRepository := persistence.NewCSVRepository()
	csvInteractor := usecase.NewCSVInteractor(csvRepository)
	jsonRepository := persistence.NewJSONRepository()
	jsonInteractor := usecase.NewJSONInteractor(jsonRepository)
	memoryDB, cleanup, err := config.NewInMemDB()
	if err != nil {
		return nil, nil, err
	}
	sqLite3Repository := memory.NewSQLite3Repository(memoryDB)
	sql := usecase.NewSQL()
	sqLite3Interactor := usecase.NewSQLite3Interactor(sqLite3Repository, sql)
	historyDB, cleanup2, err := config.NewHistoryDB(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	historyRepository := persistence.NewHistoryRepository(historyDB)
	historyInteractor := usecase.NewHistoryInteractor(historyRepository)
	shellShell := shell.NewShell(arg, configConfig, commandList, csvInteractor, jsonInteractor, sqLite3Interactor, historyInteractor)
	return shellShell, func() {
		cleanup2()
		cleanup()
	}, nil
}
