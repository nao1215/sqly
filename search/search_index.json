{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-sqly","title":"What is sqly?","text":"<p>The <code>sqly</code> command is a command-line tool for executing SQL queries on CSV/TSV/LTSV/JSON files and Microsoft Excel\u2122. <code>sqly</code> is written in Golang and supports cross-platform usage. Similar tools include harelba/q, dinedal/textql, noborus/trdsql, and mithrandie/csvq.</p> <p>One of the unique strengths of <code>sqly</code> is that it allows you to interactively build SQL queries using the <code>sqly shell</code>. You can interactively execute SQL with SQL completion and command history. Of course, you can also execute SQL without running the <code>sqly-shell</code>. Since <code>sqly</code> uses SQLite3 to execute SQL, the SQL syntax is equivalent to SQLite3.</p> <p></p>"},{"location":"#document-for-users","title":"Document for users","text":"<ul> <li>Installation</li> <li>How to use</li> <li>SQLY shell</li> <li>SQLY helper command</li> <li>Alternative tools</li> </ul>"},{"location":"#document-for-developers","title":"Document for developers","text":"<ul> <li>How to build &amp; test</li> <li>Auto-generate files</li> <li>Architecture</li> <li>Design Overview</li> </ul>"},{"location":"#topics","title":"Topics","text":"<ul> <li>Why I created sqly</li> <li>The origin of the name sqly</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>If you find a bug or have a feature request, please open an issue. If you want to contribute, please open a pull request. We welcome contributions from the community. Documentation updates are also.</p> <p>The sqly project performs quality checks using GitHub Actions. The following items are checked in GitHub Actions:</p> <ul> <li>Whether it can be built</li> <li>Whether tests pass</li> <li>Whether auto-generated files are up-to-date</li> <li>Whether test coverage exceeds 83%</li> <li>Whether it passes multiple linters (e.g., whether it follows architectural rules, whether it has security measures, etc.)</li> </ul> <p>Contributing is not limited to development. Providing a GitHub Star or becoming my sponsor also greatly boosts my motivation for development.</p>"},{"location":"#license","title":"License","text":"<p>MIT License</p>"},{"location":"alternative_tools/","title":"Alternative tools","text":"Name Description harelba/q Run SQL directly on delimited files and multi-file sqlite databases dinedal/textql Execute SQL against structured text like CSV or TSV noborus/trdsql CLI tool that can execute SQL queries on CSV, LTSV, JSON, YAML and TBLN. Can output to various formats. mithrandie/csvq SQL-like query language for csv"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#the-sqly-architecture","title":"The sqly architecture","text":"<p>The sqly project adopts the Clean Architecture. We are verifying whether the implementation follows the architecture using fe3dback/go-arch-lint.</p> <p>The sqly shell calls the <code>usecase</code> interface, and the <code>interactor</code> implements the <code>usecase</code>. The <code>interactor</code> uses the <code>domain</code> (business logic) to perform data operations. Specifically, it uses the <code>infrastructure</code> that implements the <code>domain/repository</code> interface.</p> <p>The sqly reads data from each file, converts it into a table format, and stores the converted table data in an in-memory SQLite3 database. sqly does not have its own SQL parser and relies on SQLite3 for parsing.</p> <p>Here is a high-level overview of the Clean Architecture for the sqly project:</p> <pre><code>+------------------+     +------------------+     +------------------+\n|      cmd        | --&gt; |      shell       | --&gt; |     usecase      | interface\n+------------------+     +------------------+     +------------------+\n                                                          |\n                                                          v\n                                                 +------------------+\n                                                 |    interactor    | implement\n                                                 +------------------+\n                                                          |\n                                                          v\n                      +------------------+     +------------------+\n                      | domain/model     | --&gt; | domain/repository | interface\n                      +------------------+     +------------------+\n                                                          |\n                                                          v\n                                                 +------------------+\n                                                 |  infrastructure  | implement\n                                                 +------------------+\n</code></pre>"},{"location":"architecture/#directory-structure","title":"Directory structure","text":"<pre><code>\u251c\u2500\u2500 config  # When the sqly command is executed, the configuration is read from the config directory.  \n\u251c\u2500\u2500 di      # Dependency injection\n\u251c\u2500\u2500 doc     # Documentation\n\u251c\u2500\u2500 domain  # Business logic. This directory contains the model and repository interfaces.\n\u251c\u2500\u2500 golden  # Test framework. This package is forked from https://github.com/sebdah/goldie\n\u251c\u2500\u2500 infrastructure # Implementation of the repository interface\n\u251c\u2500\u2500 interactor    # Implementation of the usecase interface. This package uses the domain and infrastructure packages.\n\u251c\u2500\u2500 shell        # sqly shell\n\u251c\u2500\u2500 testdata     # Test data\n\u2514\u2500\u2500 usecase      # Use case interface. The shell calls this interface.\n</code></pre>"},{"location":"build_and_test/","title":"Build and test","text":""},{"location":"build_and_test/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.22 or later</li> <li><code>make</code>, <code>git</code> command</li> </ul>"},{"location":"build_and_test/#install-tools-for-development","title":"Install tools for development","text":"<p>Firstly, you need to install the following tools for development. So, you clone the repository and install the tools.</p> <pre><code>git clone git@github.com:nao1215/sqly.git\ncd sqly\n</code></pre> <p>If you execute the following command, the tools are installed.  The tools are used for linting, formatting, and testing.</p> <pre><code>make install tools\n</code></pre> Tool Description Songmu/ghch Generate changelog from git history, tags and merged pull requests google/wire Compile-time Dependency Injection for Go charmbracelet/vhs Write terminal GIFs as code for integration testing and demoing your CLI tools. nikolaydubina/go-cover-treemap Go code coverage to SVG treemap golangci/golangci-lint Linters Runner for Go mock/mockgen Mocking framework for the Go programming language fe3dback/go-arch-lint GoLang architecture linter"},{"location":"build_and_test/#build-test","title":"Build &amp; Test","text":"<pre><code>$ make build\n$ make test\n</code></pre>"},{"location":"design_overview/","title":"Design overview","text":"<p>sqly: A Design Overview </p> <p>sqly operates by reading CSV, TSV, LTSV, and JSON files, inserting the loaded data into an in-memory SQLite3 database, and then executing SQL queries against it.  </p> <p>The main advantage of this design is that there is no need to implement a custom SQL parser, making development significantly easier (which is crucial). Even if additional file formats are supported in the future, as long as the data insertion process is implemented, no modifications to the SQL parsing logic will be necessary.  </p>"},{"location":"design_overview/#block-diagram-of-sqly","title":"Block Diagram of sqly","text":"<p>The following block diagram illustrates the structure of sqly.  </p> <p></p> <p>At the user interface level, there is the sqly shell, which functions similarly to command-line clients like SQLite or MySQL. To enhance user convenience, helper commands are defined, such as commands for importing files into the database. sqly reads and writes files and executes SQL commands through these helper commands. (This is not entirely accurate, but it conveys the general idea.)  </p>"},{"location":"design_overview/#adoption-of-domain-driven-design-ddd","title":"Adoption of Domain-Driven Design (DDD)","text":"<p>sqly adopts Domain-Driven Design (DDD) and follows a layered architecture to implement it. At first, we considered that a project of sqly\u2019s scale might not necessarily require DDD. However, we ultimately decided to adopt it due to the following advantages:  </p> <ul> <li>Reduced test implementation burden </li> <li>Test code can be written without inserting data into the database.  </li> <li>That said, since sqly can easily prepare databases using test data files, the benefit is less significant compared to general web service applications.  </li> <li>Easier infrastructure layer (database) modifications </li> <li>The system can support not only SQLite3 but also MySQL and PostgreSQL.  </li> <li>However, support for these databases has not yet been implemented.  </li> </ul>"},{"location":"design_overview/#dependency-analysis-with-loovgoda","title":"Dependency Analysis with loov/goda","text":"<p>Using loov/goda to analyze dependencies within the sqly package, we can observe that dependencies flow from the left (closer to the UI) to the right (closer to the database), with dependencies accumulating in the model package at the far right. Since no package depends on a higher-level layer, the structure appears well-organized.  </p> <p></p>"},{"location":"design_overview/#modeling-approach","title":"Modeling Approach","text":"<p>It would be impressive to delve deeply into modeling here, but in sqly, we took a rather straightforward approach. Specifically, we decided that the design would be sufficient as long as it facilitated easy conversion from input data to database table representations.  </p> <p>Reflecting this simplicity, sqly has two types of models:  </p> <ol> <li>File format-specific models (e.g., a CSV model corresponding to CSV files).  </li> <li>A Table model, which corresponds to a single database table.  </li> </ol> <p>Ultimately, all data is converted into the Table model within sqly, keeping the structure simple.  </p> <p></p>"},{"location":"design_overview/#a-mistake-in-the-design","title":"A Mistake in the Design","text":"<p>While drawing a diagram for this transformation process, I realized a mistake. When outputting database table contents to a file, sqly directly converts the Table model to each file format. Ideally, the data should first be converted into format-specific models (e.g., a CSV model) before outputting. This oversight highlights the downside of a hasty approach\u2014lesson learned.  </p>"},{"location":"how_to_use/","title":"How to use","text":""},{"location":"how_to_use/#sqly-behavior","title":"sqly behavior","text":"<p>If no SQL query is specified with the <code>--sql</code> option, sqly will start the sqly shell. sqly determines the file type to be loaded from the extension when the shell starts and automatically begins importing it into the SQLite3 in-memory database. Multiple files can be loaded simultaneously. The table names will be the file names (without extensions) or the Excel sheet names. If an SQL query is specified with the <code>--sql</code> option, the SQL query result will be displayed in the terminal and sqly will exit without starting the sqly shell.</p> <p>sqly allows you to change the display mode of SQL results with options. By default, the output is in table format. The output format can be changed to csv (<code>--csv</code>), excel (<code>--excel</code>), json (<code>--json</code>), ltsv (<code>--ltsv</code>), markdown (<code>--markdown</code>), or tsv (<code>--tsv</code>). Since the output mode can be changed while the sqly shell is running, it is easy to execute <code>sqly sample.csv</code> and then change settings or execute SQL queries within the sqly shell.</p>"},{"location":"how_to_use/#sqly-options","title":"sqly options","text":"<pre><code>$ sqly --help\nsqly - execute SQL against CSV/TSV/LTSV/JSON with shell (v0.10.0)\n\n[Usage]\n  sqly [OPTIONS] [FILE_PATH]\n\n[Example]\n  - run sqly shell\n    sqly\n  - Execute query for csv file\n    sqly --sql 'SELECT * FROM sample' ./path/to/sample.csv\n\n[OPTIONS]\n  -c, --csv             change output format to csv (default: table)\n  -e, --excel           change output format to excel (default: table)\n  -j, --json            change output format to json (default: table)\n  -l, --ltsv            change output format to ltsv (default: table)\n  -m, --markdown        change output format to markdown table (default: table)\n  -t, --tsv             change output format to tsv (default: table)\n  -S, --sheet string    excel sheet name you want to import\n  -s, --sql string      sql query you want to execute\n  -o, --output string   destination path for SQL results specified in --sql option\n  -h, --help            print help message\n  -v, --version         print sqly version\n\n[LICENSE]\n  MIT LICENSE - Copyright (c) 2022 CHIKAMATSU Naohiro\n  https://github.com/nao1215/sqly/blob/main/LICENSE\n\n[CONTACT]\n  https://github.com/nao1215/sqly/issues\n\nsqly runs the DB in SQLite3 in-memory mode.\nSo, SQL supported by sqly is the same as SQLite3 syntax.\n</code></pre>"},{"location":"how_to_use/#execute-sql-in-terminal-sql-option","title":"Execute sql in terminal: --sql option","text":"<p><code>--sql</code> option takes an SQL statement as an optional argument.</p> <pre><code>$ sqly --sql \"SELECT user_name, position FROM user INNER JOIN identifier ON user.identifier = identifier.id\" testdata/user.csv testdata/identifier.csv \n+-----------+-----------+\n| user_name | position  |\n+-----------+-----------+\n| booker12  | developrt |\n| jenkins46 | manager   |\n| smith79   | neet      |\n+-----------+-----------+\n</code></pre>"},{"location":"how_to_use/#change-output-format","title":"Change output format","text":"<pre><code>$ sqly --sql \"SELECT * FROM user LIMIT 2\" --csv testdata/user.csv \nuser_name,identifier,first_name,last_name\nbooker12,1,Rachel,Booker\njenkins46,2,Mary,Jenkins\n\n$ sqly --sql \"SELECT * FROM user LIMIT 2\" --json testdata/user.csv \n[\n   {\n      \"first_name\": \"Rachel\",\n      \"identifier\": \"1\",\n      \"last_name\": \"Booker\",\n      \"user_name\": \"booker12\"\n   },\n   {\n      \"first_name\": \"Mary\",\n      \"identifier\": \"2\",\n      \"last_name\": \"Jenkins\",\n      \"user_name\": \"jenkins46\"\n   }\n]\n\n$ sqly --sql \"SELECT * FROM user LIMIT 2\" --json testdata/user.csv &gt; user.json\n\n$ sqly --sql \"SELECT * FROM user LIMIT 2\" --csv user.json \nfirst_name,identifier,last_name,user_name\nRachel,1,Booker,booker12\nMary,2,Jenkins,jenkins46\n</code></pre> <p>[!WARNING] The support for JSON is limited. There is a possibility of discontinuing JSON support in the future.</p>"},{"location":"how_to_use/#output-sql-result-to-file","title":"Output sql result to file","text":""},{"location":"how_to_use/#for-linux-user","title":"For linux user","text":"<p>The sqly can save SQL execution results to the file using shell redirection. The --csv option outputs SQL execution results in CSV format instead of table format.</p> <pre><code>$ sqly --sql \"SELECT * FROM user\" --csv testdata/user.csv &gt; test.csv\n</code></pre>"},{"location":"how_to_use/#for-windows-user","title":"For windows user","text":"<p>The sqly can save SQL execution results to the file using the --output option. The --output option specifies the destination path for SQL results specified in the --sql option.</p> <pre><code>$ sqly --sql \"SELECT * FROM user\" --output=test.csv testdata/user.csv \n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#supported-os-go-version","title":"Supported OS &amp; go version","text":"<p>The following OS and Go versions are supported. The sqly is likely to work on BSD as well. However, due to the time-consuming nature of running tests on BSD environments in GitHub Actions, it is not officially supported.</p> <ul> <li>Windows</li> <li>macOS</li> <li>Linux</li> <li>go1.22 or later</li> </ul>"},{"location":"installation/#use-go-install","title":"Use \"go install\"","text":"<pre><code>go install github.com/nao1215/sqly@latest\n</code></pre>"},{"location":"installation/#use-homebrew","title":"Use homebrew","text":"<pre><code>brew install nao1215/tap/sqly\n</code></pre>"},{"location":"installation/#use-pre-built-binaries","title":"Use pre-built binaries","text":"<p>The following binaries are distributed on the release page.</p> <ul> <li>MacOS (darwin_amd64.tar.gz)</li> <li>MacOS (darwin_arm64.tar.gz)</li> <li>Linux (linux_amd64.tar.gz)</li> <li>Linux (linux_arm64.tar.gz)</li> <li>Linux (linux_amd64.deb)</li> <li>Linux (linux_arm64.deb)</li> <li>Linux (linux_amd64.rpm)</li> <li>Linux (linux_arm64.rpm)</li> <li>Windows (windows_amd64.zip)</li> <li>Windows (windows_arm64.zip)</li> </ul>"},{"location":"name_origin/","title":"Name origin","text":"<p>The origin of the name sqly is that it was named with the intention of creating a tool that surpasses the famous jmoiron/sqlx (x is followed by y). Just kidding. The real origin is that it was named with the nuance of \"SQL on CSV? (Is this guy serious?)\" like the slang \"literally\".</p>"},{"location":"sqly_helper_command/","title":"Sqly helper command","text":"<p>The sqly shell functions similarly to a common SQL client (e.g., <code>sqlite3</code> command or <code>mysql</code> command). The sqly shell has helper commands that begin with a dot. </p> <p>The sqly-shell has the following helper commands:</p> <pre><code>sqly:~/github/github.com/nao1215/sqly(table)$ .help\n        .cd: change directory\n      .dump: dump db table to file in a format according to output mode (default: csv)\n      .exit: exit sqly\n    .header: print table header\n      .help: print help message\n    .import: import file(s)\n        .ls: print directory contents\n      .mode: change output mode\n       .pwd: print current working directory\n    .tables: print tables\n</code></pre>"},{"location":"sqly_helper_command/#cd-command","title":"cd command","text":"<pre><code>sqly:~/github/github.com/nao1215/sqly(table)$ .cd\nsqly:~(table)$ .cd Desktop\nsqly:Desktop(table)$ \n</code></pre>"},{"location":"sqly_helper_command/#dump-command","title":"dump command","text":"<pre><code>sqly:~/github/github.com/nao1215/sqly(table)$ .dump\n[Usage]\n  .dump TABLE_NAME FILE_PATH\n[Note]\n  Output will be in the format specified in .mode.\n  table mode is not available in .dump. If mode is table, .dump output CSV file.\n</code></pre>"},{"location":"sqly_helper_command/#exit-command","title":"exit command","text":"<pre><code>sqly:~/github/github.com/nao1215/sqly(table)$.exit\n\n# the sqly shell is closed\n</code></pre>"},{"location":"sqly_helper_command/#header-command","title":"header command","text":"<pre><code>sqly:~/github/github.com/nao1215/sqly(table)$ .header\n[Usage]\n  .header TABLE_NAME\n</code></pre>"},{"location":"sqly_helper_command/#import-command","title":"import command","text":"<pre><code>sqly:~/github/github.com/nao1215/sqly(table)$ .import\n[Usage]\n  .import FILE_PATH(S) [--sheet=SHEET_NAME]\n\n  - Supported file format: csv, tsv, ltsv, json, xlam, xlsm, xlsx, xltm, xltx\n  - If import multiple files, separate them with spaces\n  - Does not support importing multiple excel sheets at once\n  - If import an Excel file, specify the sheet name with --sheet\n</code></pre>"},{"location":"sqly_helper_command/#ls-command","title":"ls command","text":"<p>ls command call the <code>ls</code> command or <code>dir</code> command in the shell.</p> <pre><code>sqly:~/github/github.com/nao1215/sqly/di(table)$ .ls\n\u5408\u8a08 8\n-rw-rw-r-- 1 nao nao  661  2\u6708  3 13:09 wire.go\n-rw-rw-r-- 1 nao nao 2292  2\u6708  7 10:40 wire_gen.go\n</code></pre>"},{"location":"sqly_helper_command/#mode-command","title":"mode command","text":"<pre><code>sqly:~/github/github.com/nao1215/sqly(table)$ .mode\n[Usage]\n  .mode OUTPUT_MODE   \u203b current mode=table\n[Output mode list]\n  table\n  markdown\n  csv\n  tsv\n  ltsv\n  json\n  excel \u203b active only when executing .dump, otherwise same as csv mode\n</code></pre>"},{"location":"sqly_helper_command/#pwd-command","title":"pwd command","text":"<pre><code>sqly:~/github/github.com/nao1215/sqly(table)$ .pwd\n/home/nao\n</code></pre>"},{"location":"sqly_helper_command/#tables-command","title":"tables command","text":"<pre><code>sqly:~/github/github.com/nao1215/sqly(table)$ .tables\nthere is no table. use .import for importing file\n\nsqly:~/github/github.com/nao1215/sqly(table)$  .import actor.csv\nsqly:~/github/github.com/nao1215/sqly(table)$  .import numeric.csv\nsqly:~/github/github.com/nao1215/sqly(table)$  .tables\n+------------+\n| TABLE NAME |\n+------------+\n| actor      |\n| numeric    |\n+------------+\n</code></pre>"},{"location":"sqly_shell/","title":"Sqly shell","text":""},{"location":"sqly_shell/#sqly-shell","title":"sqly-shell","text":"<p>The sqly shell starts when you run the sqly command without the <code>--sql</code> option. When you execute sqly command with file path, the sqly-shell starts after importing the file into the SQLite3 in-memory database.  The sqly-shell also supports command history, and input completion.  </p> <pre><code>$ sqly \nsqly v0.11.0\n\nenter \"SQL query\" or \"sqly command that begins with a dot\".\n.help print usage, .exit exit sqly.\n\nsqly:~/github/github.com/nao1215/sqly(table)$  .import actor.csv\nsqly:~/github/github.com/nao1215/sqly(table)$  .import numeric.csv\nsqly:~/github/github.com/nao1215/sqly(table)$  .tables\n+------------+\n| TABLE NAME |\n+------------+\n| actor      |\n| numeric    |\n+------------+\n\nsqly:~/github/github.com/nao1215/sqly(table)$  SELECT actor, best_movie FROM actor LIMIT 3\n+-------------------+------------------------------+\n|       actor       |          best_movie          |\n+-------------------+------------------------------+\n| Harrison Ford     | Star Wars: The Force Awakens |\n| Samuel L. Jackson | The Avengers                 |\n| Morgan Freeman    | The Dark Knight              |\n+-------------------+------------------------------+\n\nsqly:~/github/github.com/nao1215/sqly(table)$  .mode ltsv\nChange output mode from table to ltsv\n\nsqly:~/github/github.com/nao1215/sqly(ltsv)$  SELECT actor, best_movie FROM actor LIMIT 3\nactor:Harrison Ford     best_movie:Star Wars: The Force Awakens\nactor:Samuel L. Jackson best_movie:The Avengers\nactor:Morgan Freeman    best_movie:The Dark Knight\n</code></pre>"},{"location":"sqly_shell/#key-binding-for-sqly-shell","title":"Key Binding for sqly-shell","text":"Key Binding Description Ctrl + A Go to the beginning of the line (Home) Ctrl + E Go to the end of the line (End) Ctrl + P Previous command (Up arrow) Ctrl + N Next command (Down arrow) Ctrl + F Forward one character Ctrl + B Backward one character Ctrl + D Delete character under the cursor Ctrl + H Delete character before the cursor (Backspace) Ctrl + W Cut the word before the cursor to the clipboard Ctrl + K Cut the line after the cursor to the clipboard Ctrl + U Cut the line before the cursor to the clipboard Ctrl + L Clear the screen TAB Completion \u2191 Previous command \u2193 Next command"},{"location":"why_i_created_sqly/","title":"Why i created sqly","text":"<p>I developed sqly to easily check large CSV files.</p> <p>In a project at my company in which I was employed from 2022 to 2025, I manage the master data of an app using CSV files. These CSV files have the following characteristics and constraints:</p> <ul> <li>Large size (over 20,000 rows \u00d7 300 columns, or 100,000 rows)</li> <li>Read CSV files with Golang and insert records into multiple DB tables</li> <li>CSV and DB tables do not correspond one-to-one (data from one CSV is inserted into multiple tables)</li> <li>The people editing the CSV files are not engineers, and there are multiple editors</li> <li>The CSV files are updated several times a month</li> </ul> <p>Considering the above characteristics and constraints, the difficulties of using CSV files are as follows:</p> <ul> <li>It takes time to launch Excel/Numbers/Google Sheets (they often crash)</li> <li>Type mismatch errors occur when importing to the DB (due to mistakes in CSV columns), and it is costly to find the problematic parts</li> </ul> <p>For example, if a string is written in a column where a number should be, a decode error occurs. Unfortunately, the error message is \"A decode error occurred! (I won't tell you which column is bad!)\", so you have to manually find the problematic column.</p> <p>Using Google Sheets to find the problematic column among over 300 columns is very stressful. It is not an engineer's job. Therefore, I developed sqly to search with SQL and make things easier.</p>"}]}