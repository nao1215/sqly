// Code generated by MockGen. DO NOT EDIT.
// Source: json.go
//
// Generated by this command:
//
//	mockgen -typed -source=json.go -destination=../../infrastructure/mock/json.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockJSONRepository is a mock of JSONRepository interface.
type MockJSONRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJSONRepositoryMockRecorder
	isgomock struct{}
}

// MockJSONRepositoryMockRecorder is the mock recorder for MockJSONRepository.
type MockJSONRepositoryMockRecorder struct {
	mock *MockJSONRepository
}

// NewMockJSONRepository creates a new mock instance.
func NewMockJSONRepository(ctrl *gomock.Controller) *MockJSONRepository {
	mock := &MockJSONRepository{ctrl: ctrl}
	mock.recorder = &MockJSONRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONRepository) EXPECT() *MockJSONRepositoryMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockJSONRepository) Dump(f *os.File, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", f, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockJSONRepositoryMockRecorder) Dump(f, table any) *MockJSONRepositoryDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockJSONRepository)(nil).Dump), f, table)
	return &MockJSONRepositoryDumpCall{Call: call}
}

// MockJSONRepositoryDumpCall wrap *gomock.Call
type MockJSONRepositoryDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJSONRepositoryDumpCall) Return(arg0 error) *MockJSONRepositoryDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJSONRepositoryDumpCall) Do(f func(*os.File, *model.Table) error) *MockJSONRepositoryDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJSONRepositoryDumpCall) DoAndReturn(f func(*os.File, *model.Table) error) *MockJSONRepositoryDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockJSONRepository) List(jsonFilePath string) (*model.JSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", jsonFilePath)
	ret0, _ := ret[0].(*model.JSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockJSONRepositoryMockRecorder) List(jsonFilePath any) *MockJSONRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockJSONRepository)(nil).List), jsonFilePath)
	return &MockJSONRepositoryListCall{Call: call}
}

// MockJSONRepositoryListCall wrap *gomock.Call
type MockJSONRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJSONRepositoryListCall) Return(arg0 *model.JSON, arg1 error) *MockJSONRepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJSONRepositoryListCall) Do(f func(string) (*model.JSON, error)) *MockJSONRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJSONRepositoryListCall) DoAndReturn(f func(string) (*model.JSON, error)) *MockJSONRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
