// Code generated by MockGen. DO NOT EDIT.
// Source: ltsv.go
//
// Generated by this command:
//
//	mockgen -typed -source=ltsv.go -destination=../../infrastructure/mock/ltsv.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockLTSVRepository is a mock of LTSVRepository interface.
type MockLTSVRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLTSVRepositoryMockRecorder
	isgomock struct{}
}

// MockLTSVRepositoryMockRecorder is the mock recorder for MockLTSVRepository.
type MockLTSVRepositoryMockRecorder struct {
	mock *MockLTSVRepository
}

// NewMockLTSVRepository creates a new mock instance.
func NewMockLTSVRepository(ctrl *gomock.Controller) *MockLTSVRepository {
	mock := &MockLTSVRepository{ctrl: ctrl}
	mock.recorder = &MockLTSVRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLTSVRepository) EXPECT() *MockLTSVRepositoryMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockLTSVRepository) Dump(ltsv *os.File, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", ltsv, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockLTSVRepositoryMockRecorder) Dump(ltsv, table any) *MockLTSVRepositoryDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockLTSVRepository)(nil).Dump), ltsv, table)
	return &MockLTSVRepositoryDumpCall{Call: call}
}

// MockLTSVRepositoryDumpCall wrap *gomock.Call
type MockLTSVRepositoryDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLTSVRepositoryDumpCall) Return(arg0 error) *MockLTSVRepositoryDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLTSVRepositoryDumpCall) Do(f func(*os.File, *model.Table) error) *MockLTSVRepositoryDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLTSVRepositoryDumpCall) DoAndReturn(f func(*os.File, *model.Table) error) *MockLTSVRepositoryDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockLTSVRepository) List(ltsv *os.File) (*model.LTSV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ltsv)
	ret0, _ := ret[0].(*model.LTSV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLTSVRepositoryMockRecorder) List(ltsv any) *MockLTSVRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLTSVRepository)(nil).List), ltsv)
	return &MockLTSVRepositoryListCall{Call: call}
}

// MockLTSVRepositoryListCall wrap *gomock.Call
type MockLTSVRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLTSVRepositoryListCall) Return(arg0 *model.LTSV, arg1 error) *MockLTSVRepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLTSVRepositoryListCall) Do(f func(*os.File) (*model.LTSV, error)) *MockLTSVRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLTSVRepositoryListCall) DoAndReturn(f func(*os.File) (*model.LTSV, error)) *MockLTSVRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
