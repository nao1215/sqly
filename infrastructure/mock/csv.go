// Code generated by MockGen. DO NOT EDIT.
// Source: csv.go
//
// Generated by this command:
//
//	mockgen -typed -source=csv.go -destination=../../infrastructure/mock/csv.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCSVRepository is a mock of CSVRepository interface.
type MockCSVRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCSVRepositoryMockRecorder
	isgomock struct{}
}

// MockCSVRepositoryMockRecorder is the mock recorder for MockCSVRepository.
type MockCSVRepositoryMockRecorder struct {
	mock *MockCSVRepository
}

// NewMockCSVRepository creates a new mock instance.
func NewMockCSVRepository(ctrl *gomock.Controller) *MockCSVRepository {
	mock := &MockCSVRepository{ctrl: ctrl}
	mock.recorder = &MockCSVRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVRepository) EXPECT() *MockCSVRepositoryMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockCSVRepository) Dump(csv *os.File, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", csv, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockCSVRepositoryMockRecorder) Dump(csv, table any) *MockCSVRepositoryDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockCSVRepository)(nil).Dump), csv, table)
	return &MockCSVRepositoryDumpCall{Call: call}
}

// MockCSVRepositoryDumpCall wrap *gomock.Call
type MockCSVRepositoryDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCSVRepositoryDumpCall) Return(arg0 error) *MockCSVRepositoryDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCSVRepositoryDumpCall) Do(f func(*os.File, *model.Table) error) *MockCSVRepositoryDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCSVRepositoryDumpCall) DoAndReturn(f func(*os.File, *model.Table) error) *MockCSVRepositoryDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockCSVRepository) List(csv *os.File) (*model.CSV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", csv)
	ret0, _ := ret[0].(*model.CSV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCSVRepositoryMockRecorder) List(csv any) *MockCSVRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCSVRepository)(nil).List), csv)
	return &MockCSVRepositoryListCall{Call: call}
}

// MockCSVRepositoryListCall wrap *gomock.Call
type MockCSVRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCSVRepositoryListCall) Return(arg0 *model.CSV, arg1 error) *MockCSVRepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCSVRepositoryListCall) Do(f func(*os.File) (*model.CSV, error)) *MockCSVRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCSVRepositoryListCall) DoAndReturn(f func(*os.File) (*model.CSV, error)) *MockCSVRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
