// Code generated by MockGen. DO NOT EDIT.
// Source: history.go
//
// Generated by this command:
//
//	mockgen -typed -source=history.go -destination=../../infrastructure/mock/history.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockHistoryRepository is a mock of HistoryRepository interface.
type MockHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockHistoryRepositoryMockRecorder is the mock recorder for MockHistoryRepository.
type MockHistoryRepositoryMockRecorder struct {
	mock *MockHistoryRepository
}

// NewMockHistoryRepository creates a new mock instance.
func NewMockHistoryRepository(ctrl *gomock.Controller) *MockHistoryRepository {
	mock := &MockHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepository) EXPECT() *MockHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHistoryRepository) Create(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHistoryRepositoryMockRecorder) Create(ctx, t any) *MockHistoryRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHistoryRepository)(nil).Create), ctx, t)
	return &MockHistoryRepositoryCreateCall{Call: call}
}

// MockHistoryRepositoryCreateCall wrap *gomock.Call
type MockHistoryRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryRepositoryCreateCall) Return(arg0 error) *MockHistoryRepositoryCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryRepositoryCreateCall) Do(f func(context.Context, *model.Table) error) *MockHistoryRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryRepositoryCreateCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockHistoryRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTable mocks base method.
func (m *MockHistoryRepository) CreateTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockHistoryRepositoryMockRecorder) CreateTable(ctx any) *MockHistoryRepositoryCreateTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockHistoryRepository)(nil).CreateTable), ctx)
	return &MockHistoryRepositoryCreateTableCall{Call: call}
}

// MockHistoryRepositoryCreateTableCall wrap *gomock.Call
type MockHistoryRepositoryCreateTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryRepositoryCreateTableCall) Return(arg0 error) *MockHistoryRepositoryCreateTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryRepositoryCreateTableCall) Do(f func(context.Context) error) *MockHistoryRepositoryCreateTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryRepositoryCreateTableCall) DoAndReturn(f func(context.Context) error) *MockHistoryRepositoryCreateTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockHistoryRepository) List(ctx context.Context) (model.Histories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(model.Histories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockHistoryRepositoryMockRecorder) List(ctx any) *MockHistoryRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHistoryRepository)(nil).List), ctx)
	return &MockHistoryRepositoryListCall{Call: call}
}

// MockHistoryRepositoryListCall wrap *gomock.Call
type MockHistoryRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryRepositoryListCall) Return(arg0 model.Histories, arg1 error) *MockHistoryRepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryRepositoryListCall) Do(f func(context.Context) (model.Histories, error)) *MockHistoryRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryRepositoryListCall) DoAndReturn(f func(context.Context) (model.Histories, error)) *MockHistoryRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
