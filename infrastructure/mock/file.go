// Code generated by MockGen. DO NOT EDIT.
// Source: file.go
//
// Generated by this command:
//
//	mockgen -typed -source=file.go -destination=../../infrastructure/mock/file.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
	isgomock struct{}
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileRepository) Create(filePath string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", filePath)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileRepositoryMockRecorder) Create(filePath any) *MockFileRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileRepository)(nil).Create), filePath)
	return &MockFileRepositoryCreateCall{Call: call}
}

// MockFileRepositoryCreateCall wrap *gomock.Call
type MockFileRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileRepositoryCreateCall) Return(arg0 *os.File, arg1 error) *MockFileRepositoryCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileRepositoryCreateCall) Do(f func(string) (*os.File, error)) *MockFileRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileRepositoryCreateCall) DoAndReturn(f func(string) (*os.File, error)) *MockFileRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockFileRepository) Open(filePath string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", filePath)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileRepositoryMockRecorder) Open(filePath any) *MockFileRepositoryOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileRepository)(nil).Open), filePath)
	return &MockFileRepositoryOpenCall{Call: call}
}

// MockFileRepositoryOpenCall wrap *gomock.Call
type MockFileRepositoryOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileRepositoryOpenCall) Return(arg0 *os.File, arg1 error) *MockFileRepositoryOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileRepositoryOpenCall) Do(f func(string) (*os.File, error)) *MockFileRepositoryOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileRepositoryOpenCall) DoAndReturn(f func(string) (*os.File, error)) *MockFileRepositoryOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
