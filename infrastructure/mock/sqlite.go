// Code generated by MockGen. DO NOT EDIT.
// Source: sqlite.go
//
// Generated by this command:
//
//	mockgen -typed -source=sqlite.go -destination=../../infrastructure/mock/sqlite.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSQLite3Repository is a mock of SQLite3Repository interface.
type MockSQLite3Repository struct {
	ctrl     *gomock.Controller
	recorder *MockSQLite3RepositoryMockRecorder
	isgomock struct{}
}

// MockSQLite3RepositoryMockRecorder is the mock recorder for MockSQLite3Repository.
type MockSQLite3RepositoryMockRecorder struct {
	mock *MockSQLite3Repository
}

// NewMockSQLite3Repository creates a new mock instance.
func NewMockSQLite3Repository(ctrl *gomock.Controller) *MockSQLite3Repository {
	mock := &MockSQLite3Repository{ctrl: ctrl}
	mock.recorder = &MockSQLite3RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLite3Repository) EXPECT() *MockSQLite3RepositoryMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockSQLite3Repository) CreateTable(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockSQLite3RepositoryMockRecorder) CreateTable(ctx, t any) *MockSQLite3RepositoryCreateTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockSQLite3Repository)(nil).CreateTable), ctx, t)
	return &MockSQLite3RepositoryCreateTableCall{Call: call}
}

// MockSQLite3RepositoryCreateTableCall wrap *gomock.Call
type MockSQLite3RepositoryCreateTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSQLite3RepositoryCreateTableCall) Return(arg0 error) *MockSQLite3RepositoryCreateTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSQLite3RepositoryCreateTableCall) Do(f func(context.Context, *model.Table) error) *MockSQLite3RepositoryCreateTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSQLite3RepositoryCreateTableCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockSQLite3RepositoryCreateTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockSQLite3Repository) Exec(ctx context.Context, statement string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, statement)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockSQLite3RepositoryMockRecorder) Exec(ctx, statement any) *MockSQLite3RepositoryExecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSQLite3Repository)(nil).Exec), ctx, statement)
	return &MockSQLite3RepositoryExecCall{Call: call}
}

// MockSQLite3RepositoryExecCall wrap *gomock.Call
type MockSQLite3RepositoryExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSQLite3RepositoryExecCall) Return(arg0 int64, arg1 error) *MockSQLite3RepositoryExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSQLite3RepositoryExecCall) Do(f func(context.Context, string) (int64, error)) *MockSQLite3RepositoryExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSQLite3RepositoryExecCall) DoAndReturn(f func(context.Context, string) (int64, error)) *MockSQLite3RepositoryExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Header mocks base method.
func (m *MockSQLite3Repository) Header(ctx context.Context, tableName string) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header", ctx, tableName)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSQLite3RepositoryMockRecorder) Header(ctx, tableName any) *MockSQLite3RepositoryHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSQLite3Repository)(nil).Header), ctx, tableName)
	return &MockSQLite3RepositoryHeaderCall{Call: call}
}

// MockSQLite3RepositoryHeaderCall wrap *gomock.Call
type MockSQLite3RepositoryHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSQLite3RepositoryHeaderCall) Return(arg0 *model.Table, arg1 error) *MockSQLite3RepositoryHeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSQLite3RepositoryHeaderCall) Do(f func(context.Context, string) (*model.Table, error)) *MockSQLite3RepositoryHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSQLite3RepositoryHeaderCall) DoAndReturn(f func(context.Context, string) (*model.Table, error)) *MockSQLite3RepositoryHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Insert mocks base method.
func (m *MockSQLite3Repository) Insert(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSQLite3RepositoryMockRecorder) Insert(ctx, t any) *MockSQLite3RepositoryInsertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSQLite3Repository)(nil).Insert), ctx, t)
	return &MockSQLite3RepositoryInsertCall{Call: call}
}

// MockSQLite3RepositoryInsertCall wrap *gomock.Call
type MockSQLite3RepositoryInsertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSQLite3RepositoryInsertCall) Return(arg0 error) *MockSQLite3RepositoryInsertCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSQLite3RepositoryInsertCall) Do(f func(context.Context, *model.Table) error) *MockSQLite3RepositoryInsertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSQLite3RepositoryInsertCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockSQLite3RepositoryInsertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockSQLite3Repository) List(ctx context.Context, tableName string) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, tableName)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSQLite3RepositoryMockRecorder) List(ctx, tableName any) *MockSQLite3RepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSQLite3Repository)(nil).List), ctx, tableName)
	return &MockSQLite3RepositoryListCall{Call: call}
}

// MockSQLite3RepositoryListCall wrap *gomock.Call
type MockSQLite3RepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSQLite3RepositoryListCall) Return(arg0 *model.Table, arg1 error) *MockSQLite3RepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSQLite3RepositoryListCall) Do(f func(context.Context, string) (*model.Table, error)) *MockSQLite3RepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSQLite3RepositoryListCall) DoAndReturn(f func(context.Context, string) (*model.Table, error)) *MockSQLite3RepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *MockSQLite3Repository) Query(ctx context.Context, query string) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockSQLite3RepositoryMockRecorder) Query(ctx, query any) *MockSQLite3RepositoryQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockSQLite3Repository)(nil).Query), ctx, query)
	return &MockSQLite3RepositoryQueryCall{Call: call}
}

// MockSQLite3RepositoryQueryCall wrap *gomock.Call
type MockSQLite3RepositoryQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSQLite3RepositoryQueryCall) Return(arg0 *model.Table, arg1 error) *MockSQLite3RepositoryQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSQLite3RepositoryQueryCall) Do(f func(context.Context, string) (*model.Table, error)) *MockSQLite3RepositoryQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSQLite3RepositoryQueryCall) DoAndReturn(f func(context.Context, string) (*model.Table, error)) *MockSQLite3RepositoryQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TablesName mocks base method.
func (m *MockSQLite3Repository) TablesName(ctx context.Context) ([]*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TablesName", ctx)
	ret0, _ := ret[0].([]*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TablesName indicates an expected call of TablesName.
func (mr *MockSQLite3RepositoryMockRecorder) TablesName(ctx any) *MockSQLite3RepositoryTablesNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TablesName", reflect.TypeOf((*MockSQLite3Repository)(nil).TablesName), ctx)
	return &MockSQLite3RepositoryTablesNameCall{Call: call}
}

// MockSQLite3RepositoryTablesNameCall wrap *gomock.Call
type MockSQLite3RepositoryTablesNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSQLite3RepositoryTablesNameCall) Return(arg0 []*model.Table, arg1 error) *MockSQLite3RepositoryTablesNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSQLite3RepositoryTablesNameCall) Do(f func(context.Context) ([]*model.Table, error)) *MockSQLite3RepositoryTablesNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSQLite3RepositoryTablesNameCall) DoAndReturn(f func(context.Context) ([]*model.Table, error)) *MockSQLite3RepositoryTablesNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
