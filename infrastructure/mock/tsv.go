// Code generated by MockGen. DO NOT EDIT.
// Source: tsv.go
//
// Generated by this command:
//
//	mockgen -typed -source=tsv.go -destination=../../infrastructure/mock/tsv.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTSVRepository is a mock of TSVRepository interface.
type MockTSVRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTSVRepositoryMockRecorder
	isgomock struct{}
}

// MockTSVRepositoryMockRecorder is the mock recorder for MockTSVRepository.
type MockTSVRepositoryMockRecorder struct {
	mock *MockTSVRepository
}

// NewMockTSVRepository creates a new mock instance.
func NewMockTSVRepository(ctrl *gomock.Controller) *MockTSVRepository {
	mock := &MockTSVRepository{ctrl: ctrl}
	mock.recorder = &MockTSVRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTSVRepository) EXPECT() *MockTSVRepositoryMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockTSVRepository) Dump(tsv *os.File, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", tsv, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockTSVRepositoryMockRecorder) Dump(tsv, table any) *MockTSVRepositoryDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockTSVRepository)(nil).Dump), tsv, table)
	return &MockTSVRepositoryDumpCall{Call: call}
}

// MockTSVRepositoryDumpCall wrap *gomock.Call
type MockTSVRepositoryDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTSVRepositoryDumpCall) Return(arg0 error) *MockTSVRepositoryDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTSVRepositoryDumpCall) Do(f func(*os.File, *model.Table) error) *MockTSVRepositoryDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTSVRepositoryDumpCall) DoAndReturn(f func(*os.File, *model.Table) error) *MockTSVRepositoryDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockTSVRepository) List(tsv *os.File) (*model.TSV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tsv)
	ret0, _ := ret[0].(*model.TSV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTSVRepositoryMockRecorder) List(tsv any) *MockTSVRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTSVRepository)(nil).List), tsv)
	return &MockTSVRepositoryListCall{Call: call}
}

// MockTSVRepositoryListCall wrap *gomock.Call
type MockTSVRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTSVRepositoryListCall) Return(arg0 *model.TSV, arg1 error) *MockTSVRepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTSVRepositoryListCall) Do(f func(*os.File) (*model.TSV, error)) *MockTSVRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTSVRepositoryListCall) DoAndReturn(f func(*os.File) (*model.TSV, error)) *MockTSVRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
