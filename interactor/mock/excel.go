// Code generated by MockGen. DO NOT EDIT.
// Source: excel.go
//
// Generated by this command:
//
//	mockgen -typed -source=excel.go -destination=../interactor/mock/excel.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockExcelUsecase is a mock of ExcelUsecase interface.
type MockExcelUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockExcelUsecaseMockRecorder
	isgomock struct{}
}

// MockExcelUsecaseMockRecorder is the mock recorder for MockExcelUsecase.
type MockExcelUsecaseMockRecorder struct {
	mock *MockExcelUsecase
}

// NewMockExcelUsecase creates a new mock instance.
func NewMockExcelUsecase(ctrl *gomock.Controller) *MockExcelUsecase {
	mock := &MockExcelUsecase{ctrl: ctrl}
	mock.recorder = &MockExcelUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExcelUsecase) EXPECT() *MockExcelUsecaseMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockExcelUsecase) Dump(excelFilePath string, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", excelFilePath, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockExcelUsecaseMockRecorder) Dump(excelFilePath, table any) *MockExcelUsecaseDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockExcelUsecase)(nil).Dump), excelFilePath, table)
	return &MockExcelUsecaseDumpCall{Call: call}
}

// MockExcelUsecaseDumpCall wrap *gomock.Call
type MockExcelUsecaseDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExcelUsecaseDumpCall) Return(arg0 error) *MockExcelUsecaseDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExcelUsecaseDumpCall) Do(f func(string, *model.Table) error) *MockExcelUsecaseDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExcelUsecaseDumpCall) DoAndReturn(f func(string, *model.Table) error) *MockExcelUsecaseDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockExcelUsecase) List(excelFilePath, sheetName string) (*model.Excel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", excelFilePath, sheetName)
	ret0, _ := ret[0].(*model.Excel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockExcelUsecaseMockRecorder) List(excelFilePath, sheetName any) *MockExcelUsecaseListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExcelUsecase)(nil).List), excelFilePath, sheetName)
	return &MockExcelUsecaseListCall{Call: call}
}

// MockExcelUsecaseListCall wrap *gomock.Call
type MockExcelUsecaseListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExcelUsecaseListCall) Return(arg0 *model.Excel, arg1 error) *MockExcelUsecaseListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExcelUsecaseListCall) Do(f func(string, string) (*model.Excel, error)) *MockExcelUsecaseListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExcelUsecaseListCall) DoAndReturn(f func(string, string) (*model.Excel, error)) *MockExcelUsecaseListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
