// Code generated by MockGen. DO NOT EDIT.
// Source: ltsv.go
//
// Generated by this command:
//
//	mockgen -typed -source=ltsv.go -destination=../interactor/mock/ltsv.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockLTSVUsecase is a mock of LTSVUsecase interface.
type MockLTSVUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLTSVUsecaseMockRecorder
	isgomock struct{}
}

// MockLTSVUsecaseMockRecorder is the mock recorder for MockLTSVUsecase.
type MockLTSVUsecaseMockRecorder struct {
	mock *MockLTSVUsecase
}

// NewMockLTSVUsecase creates a new mock instance.
func NewMockLTSVUsecase(ctrl *gomock.Controller) *MockLTSVUsecase {
	mock := &MockLTSVUsecase{ctrl: ctrl}
	mock.recorder = &MockLTSVUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLTSVUsecase) EXPECT() *MockLTSVUsecaseMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockLTSVUsecase) Dump(ltsvFilePath string, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", ltsvFilePath, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockLTSVUsecaseMockRecorder) Dump(ltsvFilePath, table any) *MockLTSVUsecaseDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockLTSVUsecase)(nil).Dump), ltsvFilePath, table)
	return &MockLTSVUsecaseDumpCall{Call: call}
}

// MockLTSVUsecaseDumpCall wrap *gomock.Call
type MockLTSVUsecaseDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLTSVUsecaseDumpCall) Return(arg0 error) *MockLTSVUsecaseDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLTSVUsecaseDumpCall) Do(f func(string, *model.Table) error) *MockLTSVUsecaseDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLTSVUsecaseDumpCall) DoAndReturn(f func(string, *model.Table) error) *MockLTSVUsecaseDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockLTSVUsecase) List(ltsvFilePath string) (*model.LTSV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ltsvFilePath)
	ret0, _ := ret[0].(*model.LTSV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLTSVUsecaseMockRecorder) List(ltsvFilePath any) *MockLTSVUsecaseListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLTSVUsecase)(nil).List), ltsvFilePath)
	return &MockLTSVUsecaseListCall{Call: call}
}

// MockLTSVUsecaseListCall wrap *gomock.Call
type MockLTSVUsecaseListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLTSVUsecaseListCall) Return(arg0 *model.LTSV, arg1 error) *MockLTSVUsecaseListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLTSVUsecaseListCall) Do(f func(string) (*model.LTSV, error)) *MockLTSVUsecaseListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLTSVUsecaseListCall) DoAndReturn(f func(string) (*model.LTSV, error)) *MockLTSVUsecaseListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
