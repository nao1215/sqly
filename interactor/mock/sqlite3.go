// Code generated by MockGen. DO NOT EDIT.
// Source: sqlite3.go
//
// Generated by this command:
//
//	mockgen -typed -source=sqlite3.go -destination=../interactor/mock/sqlite3.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseUsecase is a mock of DatabaseUsecase interface.
type MockDatabaseUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseUsecaseMockRecorder
	isgomock struct{}
}

// MockDatabaseUsecaseMockRecorder is the mock recorder for MockDatabaseUsecase.
type MockDatabaseUsecaseMockRecorder struct {
	mock *MockDatabaseUsecase
}

// NewMockDatabaseUsecase creates a new mock instance.
func NewMockDatabaseUsecase(ctrl *gomock.Controller) *MockDatabaseUsecase {
	mock := &MockDatabaseUsecase{ctrl: ctrl}
	mock.recorder = &MockDatabaseUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseUsecase) EXPECT() *MockDatabaseUsecaseMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockDatabaseUsecase) CreateTable(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDatabaseUsecaseMockRecorder) CreateTable(ctx, t any) *MockDatabaseUsecaseCreateTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDatabaseUsecase)(nil).CreateTable), ctx, t)
	return &MockDatabaseUsecaseCreateTableCall{Call: call}
}

// MockDatabaseUsecaseCreateTableCall wrap *gomock.Call
type MockDatabaseUsecaseCreateTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUsecaseCreateTableCall) Return(arg0 error) *MockDatabaseUsecaseCreateTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUsecaseCreateTableCall) Do(f func(context.Context, *model.Table) error) *MockDatabaseUsecaseCreateTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUsecaseCreateTableCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockDatabaseUsecaseCreateTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockDatabaseUsecase) Exec(ctx context.Context, statement string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, statement)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDatabaseUsecaseMockRecorder) Exec(ctx, statement any) *MockDatabaseUsecaseExecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabaseUsecase)(nil).Exec), ctx, statement)
	return &MockDatabaseUsecaseExecCall{Call: call}
}

// MockDatabaseUsecaseExecCall wrap *gomock.Call
type MockDatabaseUsecaseExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUsecaseExecCall) Return(arg0 int64, arg1 error) *MockDatabaseUsecaseExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUsecaseExecCall) Do(f func(context.Context, string) (int64, error)) *MockDatabaseUsecaseExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUsecaseExecCall) DoAndReturn(f func(context.Context, string) (int64, error)) *MockDatabaseUsecaseExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecSQL mocks base method.
func (m *MockDatabaseUsecase) ExecSQL(ctx context.Context, statement string) (*model.Table, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecSQL", ctx, statement)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecSQL indicates an expected call of ExecSQL.
func (mr *MockDatabaseUsecaseMockRecorder) ExecSQL(ctx, statement any) *MockDatabaseUsecaseExecSQLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSQL", reflect.TypeOf((*MockDatabaseUsecase)(nil).ExecSQL), ctx, statement)
	return &MockDatabaseUsecaseExecSQLCall{Call: call}
}

// MockDatabaseUsecaseExecSQLCall wrap *gomock.Call
type MockDatabaseUsecaseExecSQLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUsecaseExecSQLCall) Return(arg0 *model.Table, arg1 int64, arg2 error) *MockDatabaseUsecaseExecSQLCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUsecaseExecSQLCall) Do(f func(context.Context, string) (*model.Table, int64, error)) *MockDatabaseUsecaseExecSQLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUsecaseExecSQLCall) DoAndReturn(f func(context.Context, string) (*model.Table, int64, error)) *MockDatabaseUsecaseExecSQLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Header mocks base method.
func (m *MockDatabaseUsecase) Header(ctx context.Context, tableName string) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header", ctx, tableName)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDatabaseUsecaseMockRecorder) Header(ctx, tableName any) *MockDatabaseUsecaseHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDatabaseUsecase)(nil).Header), ctx, tableName)
	return &MockDatabaseUsecaseHeaderCall{Call: call}
}

// MockDatabaseUsecaseHeaderCall wrap *gomock.Call
type MockDatabaseUsecaseHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUsecaseHeaderCall) Return(arg0 *model.Table, arg1 error) *MockDatabaseUsecaseHeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUsecaseHeaderCall) Do(f func(context.Context, string) (*model.Table, error)) *MockDatabaseUsecaseHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUsecaseHeaderCall) DoAndReturn(f func(context.Context, string) (*model.Table, error)) *MockDatabaseUsecaseHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Insert mocks base method.
func (m *MockDatabaseUsecase) Insert(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDatabaseUsecaseMockRecorder) Insert(ctx, t any) *MockDatabaseUsecaseInsertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabaseUsecase)(nil).Insert), ctx, t)
	return &MockDatabaseUsecaseInsertCall{Call: call}
}

// MockDatabaseUsecaseInsertCall wrap *gomock.Call
type MockDatabaseUsecaseInsertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUsecaseInsertCall) Return(arg0 error) *MockDatabaseUsecaseInsertCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUsecaseInsertCall) Do(f func(context.Context, *model.Table) error) *MockDatabaseUsecaseInsertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUsecaseInsertCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockDatabaseUsecaseInsertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockDatabaseUsecase) List(ctx context.Context, tableName string) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, tableName)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDatabaseUsecaseMockRecorder) List(ctx, tableName any) *MockDatabaseUsecaseListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDatabaseUsecase)(nil).List), ctx, tableName)
	return &MockDatabaseUsecaseListCall{Call: call}
}

// MockDatabaseUsecaseListCall wrap *gomock.Call
type MockDatabaseUsecaseListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUsecaseListCall) Return(arg0 *model.Table, arg1 error) *MockDatabaseUsecaseListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUsecaseListCall) Do(f func(context.Context, string) (*model.Table, error)) *MockDatabaseUsecaseListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUsecaseListCall) DoAndReturn(f func(context.Context, string) (*model.Table, error)) *MockDatabaseUsecaseListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *MockDatabaseUsecase) Query(ctx context.Context, query string) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDatabaseUsecaseMockRecorder) Query(ctx, query any) *MockDatabaseUsecaseQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabaseUsecase)(nil).Query), ctx, query)
	return &MockDatabaseUsecaseQueryCall{Call: call}
}

// MockDatabaseUsecaseQueryCall wrap *gomock.Call
type MockDatabaseUsecaseQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUsecaseQueryCall) Return(arg0 *model.Table, arg1 error) *MockDatabaseUsecaseQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUsecaseQueryCall) Do(f func(context.Context, string) (*model.Table, error)) *MockDatabaseUsecaseQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUsecaseQueryCall) DoAndReturn(f func(context.Context, string) (*model.Table, error)) *MockDatabaseUsecaseQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TablesName mocks base method.
func (m *MockDatabaseUsecase) TablesName(ctx context.Context) ([]*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TablesName", ctx)
	ret0, _ := ret[0].([]*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TablesName indicates an expected call of TablesName.
func (mr *MockDatabaseUsecaseMockRecorder) TablesName(ctx any) *MockDatabaseUsecaseTablesNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TablesName", reflect.TypeOf((*MockDatabaseUsecase)(nil).TablesName), ctx)
	return &MockDatabaseUsecaseTablesNameCall{Call: call}
}

// MockDatabaseUsecaseTablesNameCall wrap *gomock.Call
type MockDatabaseUsecaseTablesNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUsecaseTablesNameCall) Return(arg0 []*model.Table, arg1 error) *MockDatabaseUsecaseTablesNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUsecaseTablesNameCall) Do(f func(context.Context) ([]*model.Table, error)) *MockDatabaseUsecaseTablesNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUsecaseTablesNameCall) DoAndReturn(f func(context.Context) ([]*model.Table, error)) *MockDatabaseUsecaseTablesNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
