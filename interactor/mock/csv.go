// Code generated by MockGen. DO NOT EDIT.
// Source: csv.go
//
// Generated by this command:
//
//	mockgen -typed -source=csv.go -destination=../interactor/mock/csv.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCSVUsecase is a mock of CSVUsecase interface.
type MockCSVUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCSVUsecaseMockRecorder
	isgomock struct{}
}

// MockCSVUsecaseMockRecorder is the mock recorder for MockCSVUsecase.
type MockCSVUsecaseMockRecorder struct {
	mock *MockCSVUsecase
}

// NewMockCSVUsecase creates a new mock instance.
func NewMockCSVUsecase(ctrl *gomock.Controller) *MockCSVUsecase {
	mock := &MockCSVUsecase{ctrl: ctrl}
	mock.recorder = &MockCSVUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVUsecase) EXPECT() *MockCSVUsecaseMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockCSVUsecase) Dump(csvFilePath string, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", csvFilePath, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockCSVUsecaseMockRecorder) Dump(csvFilePath, table any) *MockCSVUsecaseDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockCSVUsecase)(nil).Dump), csvFilePath, table)
	return &MockCSVUsecaseDumpCall{Call: call}
}

// MockCSVUsecaseDumpCall wrap *gomock.Call
type MockCSVUsecaseDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCSVUsecaseDumpCall) Return(arg0 error) *MockCSVUsecaseDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCSVUsecaseDumpCall) Do(f func(string, *model.Table) error) *MockCSVUsecaseDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCSVUsecaseDumpCall) DoAndReturn(f func(string, *model.Table) error) *MockCSVUsecaseDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockCSVUsecase) List(csvFilePath string) (*model.CSV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", csvFilePath)
	ret0, _ := ret[0].(*model.CSV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCSVUsecaseMockRecorder) List(csvFilePath any) *MockCSVUsecaseListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCSVUsecase)(nil).List), csvFilePath)
	return &MockCSVUsecaseListCall{Call: call}
}

// MockCSVUsecaseListCall wrap *gomock.Call
type MockCSVUsecaseListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCSVUsecaseListCall) Return(arg0 *model.CSV, arg1 error) *MockCSVUsecaseListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCSVUsecaseListCall) Do(f func(string) (*model.CSV, error)) *MockCSVUsecaseListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCSVUsecaseListCall) DoAndReturn(f func(string) (*model.CSV, error)) *MockCSVUsecaseListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
