// Code generated by MockGen. DO NOT EDIT.
// Source: tsv.go
//
// Generated by this command:
//
//	mockgen -typed -source=tsv.go -destination=../interactor/mock/tsv.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTSVUsecase is a mock of TSVUsecase interface.
type MockTSVUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTSVUsecaseMockRecorder
	isgomock struct{}
}

// MockTSVUsecaseMockRecorder is the mock recorder for MockTSVUsecase.
type MockTSVUsecaseMockRecorder struct {
	mock *MockTSVUsecase
}

// NewMockTSVUsecase creates a new mock instance.
func NewMockTSVUsecase(ctrl *gomock.Controller) *MockTSVUsecase {
	mock := &MockTSVUsecase{ctrl: ctrl}
	mock.recorder = &MockTSVUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTSVUsecase) EXPECT() *MockTSVUsecaseMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockTSVUsecase) Dump(tsvFilePath string, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", tsvFilePath, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockTSVUsecaseMockRecorder) Dump(tsvFilePath, table any) *MockTSVUsecaseDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockTSVUsecase)(nil).Dump), tsvFilePath, table)
	return &MockTSVUsecaseDumpCall{Call: call}
}

// MockTSVUsecaseDumpCall wrap *gomock.Call
type MockTSVUsecaseDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTSVUsecaseDumpCall) Return(arg0 error) *MockTSVUsecaseDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTSVUsecaseDumpCall) Do(f func(string, *model.Table) error) *MockTSVUsecaseDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTSVUsecaseDumpCall) DoAndReturn(f func(string, *model.Table) error) *MockTSVUsecaseDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockTSVUsecase) List(tsvFilePath string) (*model.TSV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tsvFilePath)
	ret0, _ := ret[0].(*model.TSV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTSVUsecaseMockRecorder) List(tsvFilePath any) *MockTSVUsecaseListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTSVUsecase)(nil).List), tsvFilePath)
	return &MockTSVUsecaseListCall{Call: call}
}

// MockTSVUsecaseListCall wrap *gomock.Call
type MockTSVUsecaseListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTSVUsecaseListCall) Return(arg0 *model.TSV, arg1 error) *MockTSVUsecaseListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTSVUsecaseListCall) Do(f func(string) (*model.TSV, error)) *MockTSVUsecaseListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTSVUsecaseListCall) DoAndReturn(f func(string) (*model.TSV, error)) *MockTSVUsecaseListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
