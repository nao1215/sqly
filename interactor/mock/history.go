// Code generated by MockGen. DO NOT EDIT.
// Source: history.go
//
// Generated by this command:
//
//	mockgen -typed -source=history.go -destination=../interactor/mock/history.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockHistoryUsecase is a mock of HistoryUsecase interface.
type MockHistoryUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryUsecaseMockRecorder
	isgomock struct{}
}

// MockHistoryUsecaseMockRecorder is the mock recorder for MockHistoryUsecase.
type MockHistoryUsecaseMockRecorder struct {
	mock *MockHistoryUsecase
}

// NewMockHistoryUsecase creates a new mock instance.
func NewMockHistoryUsecase(ctrl *gomock.Controller) *MockHistoryUsecase {
	mock := &MockHistoryUsecase{ctrl: ctrl}
	mock.recorder = &MockHistoryUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryUsecase) EXPECT() *MockHistoryUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHistoryUsecase) Create(ctx context.Context, history model.History) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHistoryUsecaseMockRecorder) Create(ctx, history any) *MockHistoryUsecaseCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHistoryUsecase)(nil).Create), ctx, history)
	return &MockHistoryUsecaseCreateCall{Call: call}
}

// MockHistoryUsecaseCreateCall wrap *gomock.Call
type MockHistoryUsecaseCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryUsecaseCreateCall) Return(arg0 error) *MockHistoryUsecaseCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryUsecaseCreateCall) Do(f func(context.Context, model.History) error) *MockHistoryUsecaseCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryUsecaseCreateCall) DoAndReturn(f func(context.Context, model.History) error) *MockHistoryUsecaseCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTable mocks base method.
func (m *MockHistoryUsecase) CreateTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockHistoryUsecaseMockRecorder) CreateTable(ctx any) *MockHistoryUsecaseCreateTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockHistoryUsecase)(nil).CreateTable), ctx)
	return &MockHistoryUsecaseCreateTableCall{Call: call}
}

// MockHistoryUsecaseCreateTableCall wrap *gomock.Call
type MockHistoryUsecaseCreateTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryUsecaseCreateTableCall) Return(arg0 error) *MockHistoryUsecaseCreateTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryUsecaseCreateTableCall) Do(f func(context.Context) error) *MockHistoryUsecaseCreateTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryUsecaseCreateTableCall) DoAndReturn(f func(context.Context) error) *MockHistoryUsecaseCreateTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockHistoryUsecase) List(ctx context.Context) (model.Histories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(model.Histories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockHistoryUsecaseMockRecorder) List(ctx any) *MockHistoryUsecaseListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHistoryUsecase)(nil).List), ctx)
	return &MockHistoryUsecaseListCall{Call: call}
}

// MockHistoryUsecaseListCall wrap *gomock.Call
type MockHistoryUsecaseListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryUsecaseListCall) Return(arg0 model.Histories, arg1 error) *MockHistoryUsecaseListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryUsecaseListCall) Do(f func(context.Context) (model.Histories, error)) *MockHistoryUsecaseListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryUsecaseListCall) DoAndReturn(f func(context.Context) (model.Histories, error)) *MockHistoryUsecaseListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
