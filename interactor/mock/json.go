// Code generated by MockGen. DO NOT EDIT.
// Source: json.go
//
// Generated by this command:
//
//	mockgen -typed -source=json.go -destination=../interactor/mock/json.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/nao1215/sqly/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockJSONUsecase is a mock of JSONUsecase interface.
type MockJSONUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockJSONUsecaseMockRecorder
	isgomock struct{}
}

// MockJSONUsecaseMockRecorder is the mock recorder for MockJSONUsecase.
type MockJSONUsecaseMockRecorder struct {
	mock *MockJSONUsecase
}

// NewMockJSONUsecase creates a new mock instance.
func NewMockJSONUsecase(ctrl *gomock.Controller) *MockJSONUsecase {
	mock := &MockJSONUsecase{ctrl: ctrl}
	mock.recorder = &MockJSONUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONUsecase) EXPECT() *MockJSONUsecaseMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockJSONUsecase) Dump(jsonFilePath string, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", jsonFilePath, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockJSONUsecaseMockRecorder) Dump(jsonFilePath, table any) *MockJSONUsecaseDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockJSONUsecase)(nil).Dump), jsonFilePath, table)
	return &MockJSONUsecaseDumpCall{Call: call}
}

// MockJSONUsecaseDumpCall wrap *gomock.Call
type MockJSONUsecaseDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJSONUsecaseDumpCall) Return(arg0 error) *MockJSONUsecaseDumpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJSONUsecaseDumpCall) Do(f func(string, *model.Table) error) *MockJSONUsecaseDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJSONUsecaseDumpCall) DoAndReturn(f func(string, *model.Table) error) *MockJSONUsecaseDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockJSONUsecase) List(jsonFilePath string) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", jsonFilePath)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockJSONUsecaseMockRecorder) List(jsonFilePath any) *MockJSONUsecaseListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockJSONUsecase)(nil).List), jsonFilePath)
	return &MockJSONUsecaseListCall{Call: call}
}

// MockJSONUsecaseListCall wrap *gomock.Call
type MockJSONUsecaseListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJSONUsecaseListCall) Return(arg0 *model.Table, arg1 error) *MockJSONUsecaseListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJSONUsecaseListCall) Do(f func(string) (*model.Table, error)) *MockJSONUsecaseListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJSONUsecaseListCall) DoAndReturn(f func(string) (*model.Table, error)) *MockJSONUsecaseListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
